#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAX_USERS 100

// Node to represent each user
typedef struct Node {
    int user_id;
    struct Node* next;
} Node;

// Graph representation using adjacency list
typedef struct Graph {
    Node* adjacency_list[MAX_USERS];
    int num_users;
} Graph;

// Function to create a new node
Node* createNode(int user_id) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->user_id = user_id;
    newNode->next = NULL;
    return newNode;
}

// Function to create a graph
Graph* createGraph(int num_users) {
    Graph* graph = (Graph*)malloc(sizeof(Graph));
    graph->num_users = num_users;
    for (int i = 0; i < num_users; ++i) {
        graph->adjacency_list[i] = NULL;
    }
    return graph;
}

// Function to add an edge between two users
void addEdge(Graph* graph, int user1, int user2) {
    Node* newNode = createNode(user2);
    newNode->next = graph->adjacency_list[user1];
    graph->adjacency_list[user1] = newNode;
}

// Function to perform depth-first search
bool DFS(Graph* graph, int start, int end, bool visited[]) {
    if (start == end) {
        printf("%d ", start);
        return true;
    }

    visited[start] = true;
    Node* current = graph->adjacency_list[start];
    while (current != NULL) {
        if (!visited[current->user_id]) {
            if (DFS(graph, current->user_id, end, visited)) {
                printf("%d ", start);
                return true;
            }
        }
        current = current->next;
    }
    return false;
}

// Function to find path between two users
void findPath(Graph* graph, int user1, int user2) {
    bool visited[MAX_USERS] = {false};
    printf("Path between %d and %d: ", user1, user2);
}
